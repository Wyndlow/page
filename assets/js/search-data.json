{
  
    
        "post0": {
            "title": "Another notes page",
            "content": "Just a place to put general notes that don’t belong to a specific category .",
            "url": "https://wyndlow.github.io/page/markdown/2022/08/28/more-notes.html",
            "relUrl": "/markdown/2022/08/28/more-notes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Code.org Progress and Notes",
            "content": "Proof of completion and notes for Code.Org . Lesson 1 . Software Engineer: Person who designs, develops, and tests software for home, school, and business use. . Lesson 2 . . Lesson 3 . . Lesson 4 . Argument vs. Parameter: An Argument is a value passed to a method or constructor when the method or constructor is called. A Parameter is a variable in a method or constructor signature that defines the type of value to receive when the method or constructor is called. Effectively the difference between when it is utilized. Parameter is coded in, while the argument is passed when the method/constructor is called. . Lesson 5 . .",
            "url": "https://wyndlow.github.io/page/jupyter/2022/08/28/cdorg.html",
            "relUrl": "/jupyter/2022/08/28/cdorg.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Unknown",
            "content": "Filler text for testing .",
            "url": "https://wyndlow.github.io/page/2022/08/28/Unknown.html",
            "relUrl": "/2022/08/28/Unknown.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Chemical Calculator",
            "content": "import java.util.Scanner; public class Chemicals{ public String chemical(int atomicNum){ String[] abbrev = {&quot;H&quot;, &quot;He&quot;}; return abbrev[atomicNum-1]; } private static double molarMass(int atomicNum){ double[] amu = {1.008, 4.0026}; return amu[atomicNum]; } private static double calculator(){ Scanner input; double sum = 0; int atomicNum = 0; input = new Scanner(System.in); int mols = 0; while(atomicNum != -1){ System.out.println(&quot;Enter atomic number of element, -1 to finish:&quot;); atomicNum = input.nextInt(); if (atomicNum == -1){ break; } else { System.out.println(&quot;Enter amount of element:&quot;); mols = input.nextInt(); sum += (molarMass(atomicNum - 1) * mols); //This is an instance where the += //operator is used. This adds the value of molarMass(atomicNum-1) * mols to the already existent //value of sum. } } input.close(); return sum; } public static void main(String[] args){ double endValue = calculator(); System.out.println(endValue + &quot; amu&quot;); } } Chemicals.main(null); . Enter atomic number of element, -1 to finish: Enter amount of element: Enter atomic number of element, -1 to finish: 4.032 amu .",
            "url": "https://wyndlow.github.io/page/pbl/2022/08/25/chemicalcalc.html",
            "relUrl": "/pbl/2022/08/25/chemicalcalc.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Primitives and Java",
            "content": "Boolean - boolean . Character - char . Integer - byte, short, int, long, float . Floating-Point - float, double Float has a precision of 7 total numbers . Capitalized data types are not primitives (String, Arrays, Structures, etc.) These are Objects, primitives are not objects They have setters, getters, and manipulation . Hard Coded: Variables are predetermined and unchangeable outside of the code. . Dynamic: Are variable, like by user input. . import java.util.Scanner; import java.util.ArrayList; public class MedicalRecord{ public String name(){ //String is used here, because a name is a array of characters, //therefore making String the most convenient to capture a name Scanner input; input = new Scanner(System.in); //Creates new scanner object String inputName = &quot;N/a&quot;; //Initializes inputName as a String wrapper class. System.out.println(&quot;Input name of patient:&quot;); try { inputName = input.nextLine(); //Assigns the next inputted String into inputName } catch (Exception e) { System.out.println(&quot;Not a valid name, &quot; +e); } input.close(); //Closes input return inputName; //Returns String inputName } public int age(){ //An age is typically counted in whole numbers. So is an integer, //therefore making it the best to use. Scanner input; input = new Scanner(System.in); int inputAge = 0; //Initializes integer inputAge as 0 System.out.println(&quot;Input age of patient:&quot;); try { inputAge = input.nextInt(); //Assigns next inputted integer to inputAge } catch (Exception e) { System.out.println(&quot;Not a valid age, &quot; +e); } input.close(); return inputAge; //returns integer inputAge } public float weight(){ //Weight is often caught using 2 decimal points //and will typically only be 5 numbers, a float has a precision of 7 //making it suitable to capture weight. Scanner input; input = new Scanner(System.in); float inputWeight = 0; System.out.println(&quot;Input weight of patient:&quot;); try { inputWeight = input.nextFloat(); } catch (Exception e) { System.out.println(&quot;Not a valid weight, &quot; +e); } input.close(); return inputWeight; } public float height(){ Scanner input; input = new Scanner(System.in); float inputHeight = 0; System.out.println(&quot;Input Height of patient (Centimeters):&quot;); try { inputHeight = input.nextFloat(); } catch (Exception e) { System.out.println(&quot;Not a valid Height, &quot; +e); } input.close(); return inputHeight; } private boolean insurance(){ //Status of insurance is a yes or no parameter, //therefore the true or false boolean can easily contain this information. Scanner input; input = new Scanner(System.in); boolean inputInsurance = false; System.out.println(&quot;Input state of insurance of patient:&quot;); try { inputInsurance = input.nextBoolean(); } catch (Exception e) { System.out.println(&quot;Not true or false, &quot; +e); } input.close(); return inputInsurance; } public ArrayList&lt;String&gt; condition(){ //A person can have multiple symptoms and //conditions, therefore multiple strings in the form of an ArrayList //contains this data easily. ArrayList&lt;String&gt; symptoms = new ArrayList&lt;String&gt;(); Scanner input; input = new Scanner(System.in); boolean check0 = true; String temp = &quot;N/a&quot;; while (check0 == true){ input = new Scanner(System.in); System.out.println(&quot;Enter a Symptom, 0 to finish:&quot;); temp = input.nextLine(); if (temp.contains(&quot;0&quot;)){ check0 = false; break; } else { symptoms.add(temp); } } input.close(); return symptoms; } public static void main(String[] args){ MedicalRecord record = new MedicalRecord(); //Creates new object record as an //object of type MedicalRecord String name = record.name(); // int age = record.age(); float weight = record.weight(); float height = record.height(); boolean insured = record.insurance(); ArrayList&lt;String&gt; symptoms = record.condition(); System.out.println(&quot;Name: &quot; + name); System.out.println(&quot;Age: &quot; + age); System.out.println(&quot;Weight: &quot; + weight + &quot; lbs.&quot;); System.out.println(&quot;Height: &quot; + height + &quot; cm.&quot;); System.out.println(&quot;Insured: &quot; + insured); System.out.println(&quot;Symptoms: &quot; + symptoms); } } MedicalRecord.main(null); . Input name of patient: Input age of patient: Input weight of patient: Input Height of patient (Centimeters): Input state of insurance of patient: Enter a Symptom, 0 to finish: Enter a Symptom, 0 to finish: Enter a Symptom, 0 to finish: Enter a Symptom, 0 to finish: Enter a Symptom, 0 to finish: Enter a Symptom, 0 to finish: Enter a Symptom, 0 to finish: Name: A Age: 37 Weight: 172.9 lbs. Height: 162.0 cm. Insured: true Symptoms: [Lethargy, Rash, Cough, Muscle pain, Depression, ] . public static void main(String[] args){ int test; double test1 = 30.99; test = (int)test1; //This type casts double test1 to an integer, forcing 30.99 to become an integer, losing the .99. //This type of code would be useful when you need a whole number result //but input can be of type double or float. System.out.println(test); } main(null); . 30 .",
            "url": "https://wyndlow.github.io/page/pbl/cb/2022/08/22/primitives.html",
            "relUrl": "/pbl/cb/2022/08/22/primitives.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Bash",
            "content": "Basic Commands . ls: Lists computer files in Unix operating systems . cd: Navigate and change working directory . pwd: Print working directory . echo: Displays a string passed as an argument. . cat: Reads data from the file and gives its contents as output . env: Show setting for my shell . git clone: Sets up a director of files . cd $project: Allows user to move inside that directory of files . Bash Commands . . python --version python2 --version anaconda --version java --version jupyter --version jupyter kernelspec list conda list | grep &quot;jupyter&quot; . Python 3.9.12 Python 2.7.18 anaconda Command line client (version 1.9.0) openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.15.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/wyndlow/.local/share/jupyter/kernels/bash java /home/wyndlow/.local/share/jupyter/kernels/java javascript /home/wyndlow/.local/share/jupyter/kernels/javascript python3 /home/wyndlow/.local/share/jupyter/kernels/python3 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 .",
            "url": "https://wyndlow.github.io/page/pbl/2022/08/22/bash.html",
            "relUrl": "/pbl/2022/08/22/bash.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Python",
            "content": "print(&quot;Hello&quot;) . Hello .",
            "url": "https://wyndlow.github.io/page/2022/08/20/python.html",
            "relUrl": "/2022/08/20/python.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Java",
            "content": "Object-Oriented Programming(OOP) . An Approach to creating and using models of physical or imagined objects . Class: . A Programmer-defined blueprint from which objects are created. A blueprint for how to create an instance of itself . Attributes: Characteristics of an Object . Behaviors: Actions that an object can perform . Object: An instance of the class . Instantiate: To call the constructor to create an object . Constructor: A block of code that has the same name as the class and tells the computer how to create a new object. . Reference Variable: A variable that points to an object . State: The Attributes represented by the object&#39;s instance variables . Camel Case: . Naming convention where the first letter of the first word is upper or lowercase, and the first letter of each additional word is uppercase . Calling Methods . Methods: A named set of instructions to perform a task . Parameter: A variable in the method that defines the type of value to receive when the method is called. . Begins with the name of the object, a dot operator, name of the method, and an argument within parentheses . Dot Operator: Used to call a method in a class . Argument: Value passed to a method when the method is called. . Types of Values . Numbers: Integers, Floats, Doubles | Text: String, Characters | True or False: Boolean | Taken from CSA: Object-Oriented Programming, CSA: Creating Objects, and CSA: Calling Methods by Code.org . System.out.println(&quot;Hello&quot;); . Hello . char output = &#39;A&#39;; for (int i = 0; i &lt; 26; i++){ System.out.println(output); output++; } . A B C D E F G H I J K L M N O P Q R S T U V W X Y Z . static void test(){ System.out.println(&quot;Testing&quot;); } static void number(){ System.out.println(&quot;3&quot;); } public static void main(){ test(); number(); } main(); . Testing 3 .",
            "url": "https://wyndlow.github.io/page/jupyter/cb/pbl/2022/08/20/javapart.html",
            "relUrl": "/jupyter/cb/pbl/2022/08/20/javapart.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Test Markdown Page",
            "content": "Figuring it out . More test . Hacks Stuff . Some | More | Stuff | Not real code .",
            "url": "https://wyndlow.github.io/page/markdown/2022/08/20/attempt.html",
            "relUrl": "/markdown/2022/08/20/attempt.html",
            "date": " • Aug 20, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Pronouns: He/him . Jeremiah is a APCSA student who’s not really sure why he’s taking APCSA, but he’s too far in to back out now. He’s got three older sisters. . That’s really all there is to it. .",
          "url": "https://wyndlow.github.io/page/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Notes",
          "content": "Important Vocab . . Pages for specific stuff . Primitives Java Word Notes . References . W3schools-Java and more Markdown Syntax .",
          "url": "https://wyndlow.github.io/page/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "Tools",
          "content": "",
          "url": "https://wyndlow.github.io/page/tools/",
          "relUrl": "/tools/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://wyndlow.github.io/page/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}